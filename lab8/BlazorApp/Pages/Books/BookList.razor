@page "/books/booksList"
@inject IBookService BookService
@inject NavigationManager NavigationManager
@using Pages

<div class="pagination-heading">
    <h3 class="book-list-heading text-center">BookList</h3>
    <p class="create-book-link text-right">
        <a href="books/createbook" class="btn btn-primary">Create new book</a>
    </p>
</div>

@if (books == null || isLoading)
{
    <Loading/>
}

else
{
    <style>
        .list-group {
            padding: 10px;
        }

        .list-group-item {
            margin-bottom: 10px;
            padding: 15px;
            overflow: auto; /* Add overflow property to handle content overflow */
            border: 1px solid #ddd; /* Add border for better visibility */
            border-radius: 5px; /* Add border-radius for a rounded appearance */
        }
    </style>

    <div class="list-group">
        @foreach (var book in books)
        {
            <div class="list-group-item">
                <h4 class="list-group-item-heading">@book.Title</h4>
                <p class="list-group-item-text">@book.Author</p>
                <p class="list-group-item-text">@book.Description</p>
                <button class="btn btn-primary" @onclick="()=> GoToEdit(book.Id)">Edit</button>
            </div>
        }
    </div>
    <div class="pagination-container">
        <button class="btn btn-primary pagination-btn" disabled="@(currentPage==1)" @onclick="PreviousPage">Previous</button>
        <span class="current-page">@currentPage</span>
        <button class="btn btn-primary pagination-btn" @onclick="NextPage">Next</button>
    </div>

    <style>
        .pagination-heading {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .pagination-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px; /* Adjust margin as needed */
        }

        .pagination-btn {
            width: 120px; /* Adjust width as needed */
            margin: 0 10px; /* Adjust margin as needed */
        }

        .current-page {
            font-weight: bold;
            font-size: 18px; /* Adjust font size as needed */
            margin: 0 10px; /* Adjust margin as needed */
        }
    </style>
}



@code {
    private bool isLoading = false;

    private List<Book> books;
    private string message = "Loading books...";

    private int currentPage = 1;
    private const int pageSize = 10;

    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();   
    }

    private async Task LoadBooks()
    {
        isLoading = true;
        var response = await BookService.GetBooksAsync(currentPage, pageSize);
        if (response.Success)
        {
            books = response.Data.Data;
        }
        else
        {
            message = response.Message;
        }
        isLoading = false;
    }


    void GoToEdit(int id)
    {
        NavigationManager.NavigateTo($"/books/editbook/{id}");
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadBooks();
        }
    }
    private async Task NextPage()
    {
        currentPage++;
        await LoadBooks();
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadBooks();
    }
}

