@page "/Login"
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Authorization;
@using ProjectShared.User;
@using ProjectShared.Services.AuthService;

@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<div style="text-align: center; margin-top: 20px; margin-bottom: 20px;">
    <h3>Login</h3>
</div>



<EditForm Model="userLoginDTO" OnValidSubmit="HandleLogin" class="login-form">
    <div class="form-group">
        <label for="email">Email:</label>
        <InputText @bind-Value="userLoginDTO.Email" id="email" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText @bind-Value="userLoginDTO.Password" id="password" type="password" class="form-control"></InputText>
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<style>
    .login-form {
        max-width: 400px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
    }

    button {
        background-color: #007bff;
        color: #fff;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

        button:hover {
            background-color: #0056b3;
        }
</style>


@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {

    private UserLoginDTO userLoginDTO = new UserLoginDTO();
    private string message = string.Empty;

    private async Task HandleLogin()
    {
        var result = await  AuthService.Login(userLoginDTO);
        if (result.Success)
        {
            await LocalStorageService.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
        }
    }

}
